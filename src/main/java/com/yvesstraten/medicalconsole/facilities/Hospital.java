package com.yvesstraten.medicalconsole.facilities;

import com.yvesstraten.medicalconsole.Editable;
import com.yvesstraten.medicalconsole.Format;
import com.yvesstraten.medicalconsole.Patient;
import java.util.ArrayList;
import java.util.Optional;
import java.util.Random;
import java.util.stream.Stream;

/**
 * This class represents a hospital
 *
 * @author Yves Straten e2400068
 */
public class Hospital extends MedicalFacility {
  /** The probability of admission,
	 * autogenerated by constructor */
  @Editable(message = "Please set a new probability of admission:")
  private double probAdmit;

  /** Procedures offered by this hospital */
  private ArrayList<Procedure> procedures;

  /**
   * Constructs this hospital
   *
   * @param id - id to give this hospital
   * @param name - name to give this hospital
   * @param procedures - procedures that this hospital offers
   */
  public Hospital(final int id, String name, ArrayList<Procedure> procedures) {
    super(id, name);

    setProbAdmit(new Random().nextDouble(1));
    setProcedures(procedures);
  }

  /**
   * Constructs this hospital
   *
   * @param id - id to give this hospital
   * @param name - name to give this hospital
   */
  public Hospital(int id, String name) {
    this(id, name, new ArrayList<Procedure>());
  }

  /**
   * This hospital must have an id, as such providing no details is <b>unsupported</b>
   *
   * @throws UnsupportedOperationException always
   */
  public Hospital() {
    super();
  }

  /**
   * Get probability of admission of this hospital
   *
   * @return probability of admission
   */
  public double getProbAdmit() {
    return this.probAdmit;
  }

  /**
   * Get procedures that this hospital offers
   *
   * @return procedures offered
   */
  public ArrayList<Procedure> getProcedures() {
    return this.procedures;
  }

  /**
   * Get a stream of procedures offered by this hospital
   *
   * @return stream of procedures
   */
  public Stream<Procedure> getProceduresStream() {
    return getProcedures().stream();
  }

  /**
   * Set the probability of admission of this hospital
   *
   * @param probAdmit - probability to set
   */
  public void setProbAdmit(double probAdmit) {
    this.probAdmit = probAdmit;
  }

  /**
   * Set procedure offered by this hospital
   *
   * @param procedures - procedures to set
   */
  public void setProcedures(ArrayList<Procedure> procedures) {
    this.procedures = procedures;
  }

  /**
   * Removes a procedure from this hospital
   *
   * @param toRemove - procedure to remove
   */
  public void removeProcedure(Procedure toRemove) {
    getProcedures().remove(toRemove);
  }

  /**
   * Makes a patient visit this hospital, setting the current facility
   *
   * @param pat - Patient that will visit
   * @return true if randomly generated number is larger than the probability of admission false
   *     otherwise
   */
  public boolean visit(Patient pat) {
    Random random = new Random();
    double rand = random.nextDouble(1);
    if (rand > getProbAdmit()) {
      pat.setMedicalFacility(this);
      return true;
    }

    return false;
  }

  /**
   * Helper function to get the cost of an operation
   *
   * @param patient patient to operate
   * @param procedure procedure to undertake
   * @return calculated cost
   */
  public static double getOperationCost(Patient patient, Procedure procedure) {
    double cost;
    if (patient.isPrivate()) {
      if (procedure.isElective()) {
        cost = 2000;
      } else {
        cost = 1000;
      }
    } else {
      // Public patient
      if (procedure.isElective()) {
        cost = procedure.getCost();
      } else {
        cost = 0;
      }
    }

    return cost;
  }

  /**
   * String representation of this hospital
   *
   * @return string representation
   */
  @Override
  public String toString() {
    Optional<String> proceduresDetails =
        getProceduresStream()
            .map((procedure) -> procedure.toString())
            .reduce((before, next) -> before + "\n" + next);

    String proceduresString =
        proceduresDetails.isEmpty()
            ? " and no procedures"
            : " and the following procedures: \n"
                + Format.bulletedContent(proceduresDetails.get()).strip();

    return "Hospital named " + getName() + " with id " + getId() + proceduresString;
  }
}
